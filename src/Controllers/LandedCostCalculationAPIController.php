<?php
/*
 * LandedCostCalculationAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace LandedCostCalculationAPILib\Controllers;

use LandedCostCalculationAPILib\APIException;
use LandedCostCalculationAPILib\APIHelper;
use LandedCostCalculationAPILib\Configuration;
use LandedCostCalculationAPILib\Models;
use LandedCostCalculationAPILib\Exceptions;
use LandedCostCalculationAPILib\Http\HttpRequest;
use LandedCostCalculationAPILib\Http\HttpResponse;
use LandedCostCalculationAPILib\Http\HttpMethod;
use LandedCostCalculationAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class LandedCostCalculationAPIController extends BaseController {

    /**
     * @var LandedCostCalculationAPIController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return LandedCostCalculationAPIController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Convenience API to check credentials. This API is purposefully non-performant.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getValidateCreds () 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v3/validate-creds';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized. Invalid credentials, or no subscription to Landed Cost found.', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);
    }
        
    /**
     * Returns the fully qualified landed cost calculation for a shipment
     * @param  Models\CalculateRequest $request     Required parameter: The document used to request a fully qualified landedcost calculation for a shipment
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createCalculate (
                $request) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v3/calculate';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($request));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 500) {
            throw new APIException('Invalid request', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\CalculateResponse());
    }
        
    /**
     * Returns rate information given an HS code, source country and destination country
     * @param  array     $request     Required parameter: The document used to request rate data for a collection of hs codes
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createRates (
                $request) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v3/rates';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($request));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 500) {
            throw new APIException('Invalid request', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapArray($response->body, array(), new Models\Response());
    }
        
    /**
     * Returns units used in all rate formulas for given HS codes.
     * Can optionally be filtered by providing source and destination country codes
     * @param  array     $request     Required parameter: The document used to request rate units data for a collection of hs codes
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createUnits (
                $request) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v3/units';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($request));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 500) {
            throw new APIException('Invalid request', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapArray($response->body, array(), new Models\Response73());
    }
        

}